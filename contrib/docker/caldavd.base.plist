<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">

<!--
    Copyright (c) 2006-2017 Apple Inc. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  -->

<!-- 
    This is used as base for configuration,
    it may explicitly declare some config coming from
    /home/ccs/conf/caldavd-stdconfig.plist
    to provide good documentation.

    This file is not to be used alone.
    docker_entrypoint.sh generates a configuration file,
    that imports this as a base,
    and then includes user configurable files
    from volume /etc/caldavd.

    Edit /etc/caldavd/caldavd.ext.plist for your custom configuration!
 -->
<plist version="1.0">
<dict>

	<!-- Docker: Must be above 1024 for OpenShift -->
	<!-- HTTP port (0 to disable HTTP) -->
	<key>HTTPPort</key>
	<integer>8080</integer>

	<!-- True: database; False: files (deprecated) -->
	<key>UseDatabase</key>
	<true/>

	<!-- Possible values: empty, meaning 'spawn postgres yourself', or 'postgres'
	     or 'oracle', meaning 'connect to a postgres or Oracle database as
	     specified by the 'DSN' configuration key. -->
	<key>DBType</key>
	<string>postgres</string>

	<!-- Features supported by the database

	     'skip-locked': SKIP LOCKED available with SELECT (remove if using postgres
	     &lt; v9.5) -->
	<key>DBFeatures</key>
	<array>
		<string>skip-locked</string>
	</array>

	<!-- Set to True to prevent the server or utility tools from running if the
	     database needs a schema upgrade. -->
	<key>FailIfUpgradeNeeded</key>
	<true/>

	<!-- Set to True to check the current database schema against the schema file
	     matching the database schema version. -->
	<key>CheckExistingSchema</key>
	<true/>

	<!-- Data store -->

	<!-- The top level directory, contains (by default) ConfigRoot and DataRoot -->
	<key>ServerRoot</key>
	<string>/var/db/caldavd</string>

	<!-- Config directory, contains additional config files -->
	<key>ConfigRoot</key>
	<string>/etc/caldavd</string>

</dict>
</plist>
